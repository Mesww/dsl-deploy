{"ast":null,"code":"export default {};","map":{"version":3,"names":[],"sources":["/home/worawut_kni/Work/dsl-queue-vue-2/src/pages/student/main.vue"],"sourcesContent":[" <template>\n  <div class=\"screens\">\n    <navbars/>\n    <div class=\"maincontent\">\n      <div class=\"text-wrapper-2 mt-5 mb-16\">\n        กรุณามาให้ตรงเวลา&nbsp;&nbsp;\n        <br />\n        ถ้าถึงคิวคุณแล้วไม่อยู่ ระบบจะถือว่าสละสิทธิ์\n      </div>\n      <div class=\"channel-wrapper\">\n        <div class=\"channel\">\n          <div class=\"textchannel\">ช่องรับบริการที่ 1</div>\n          <div class=\"blockchannel\">\n            <img class=\"\" alt=\"Ellipse\" src=\"~/assets/images/Ellipse16.png\" />\n            <div class=\"flex items-center\">\n              <span class=\"i-heroicons-user-solid w-10 h-10 mr-3\"></span>\n              <p>{{ channel1 }}</p>\n            </div>\n          </div>\n        </div>\n        <div class=\"channel\">\n          <div class=\"textchannel\">ช่องรับบริการที่ 2</div>\n          <div class=\"blockchannel\">\n            <img class=\"\" alt=\"Ellipse\" src=\"~/assets/images/Ellipse16.png\" />\n            <div class=\"flex items-center\">\n              <span class=\"i-heroicons-user-solid w-10 h-10 mr-3\"></span>\n              <p>{{ channel2 }}</p>\n            </div>\n          </div>\n        </div>\n        <div class=\"channel\">\n          <div class=\"textchannel\">ช่องรับบริการที่ 3</div>\n          <div class=\"blockchannel\">\n            <img class=\"\" alt=\"Ellipse\" src=\"~/assets/images/Ellipse16.png\" />\n            <div class=\"flex items-center\">\n              <span class=\"i-heroicons-user-solid w-10 h-10 mr-3\"></span>\n              <p>{{ channel3 }}</p>\n            </div>\n          </div>\n        </div>\n      </div>\n      <div class=\"flex justify-end\">\n        <UButton color=\"red\" class=\"cancelbutton\" @click=\"cancelqueue\"\n          >ยกเลิกคิว</UButton\n        >\n      </div>\n    </div>\n  </div>\n</template> \n\n<script>\nexport default {\n  \n}\n</script>\n\n<!-- <script setup lang=\"ts\">\nimport { useIntervalFn } from \"@vueuse/core\";\nimport \"animate.css\";\nimport Swal from \"sweetalert2\";\nimport { ref } from \"vue\";\nimport { cookies } from \"vue3-cookies\";\n\nimport navbars from '../../components/student/home.navbar.vue';\n\nconst { cookies } = cookies();\n\nlet queue = ref(0);\n// admin channel\nlet channel = \"1\";\n\nlet channel1 = ref(0);\nlet channel2 = ref(0);\nlet channel3 = ref(0);\nlet leftqueue = ref(0);\nconst is_reserve = cookies.get(\"is_reserve\");\nconst userid = cookies.get(\"userid\");\nconst myqueueid = cookies.get(\"myqueueid\");\n\nconsole.log(userid.value);\nrefreshNuxtData();\n\nconst { data: user } = await useFetch(`/api/user/user?userid=${userid.value}`);\nconsole.log(user.value);\n\n//post\nfunction convertChannel(data: string) {\n  switch (data) {\n    case \"WAIT\":\n      data = \"ยังไม่ได้เรียก\";\n      break;\n    case \"ONE\":\n      data = \"1\";\n      break;\n    case \"TWO\":\n      data = \"2\";\n      break;\n    case \"THREE\":\n      data = \"3\";\n      break;\n    default:\n      break;\n  }\n  return data;\n}\n\n// const queueid = 1;\nconst studentID = user.value?.studentid;\n\n// get data\nconst { data: myqueues, pending } = await useLazyAsyncData<{\n  queueid: number;\n  datetime: string;\n  studentID: string;\n  type: string;\n  orders: number;\n  channel: string;\n  status: string;\n  rate: number;\n  comment: string;\n}>(\"queue\", () =>\n  $fetch(\"/api/queue/queueDataspecific\", {\n    method: \"post\",\n    body: {\n      studentID: studentID,\n    },\n  })\n);\n\nif (myqueueid.value !== undefined && myqueueid.value !== null ) {\n  queue.value = parseInt(myqueueid.value );\n}\n\nconst { data: allQueues } = await useLazyAsyncData<\n  {\n    queueid: number;\n    datetime: string;\n    studentID: string;\n    type: string;\n    orders: number;\n    channel: string;\n    status: string;\n    rate: number;\n    comment: string;\n  }[]\n>(\"allqueue\", () => $fetch(\"/api/queue/queueData\"));\n\nconsole.log(myqueues.value);\nconst {data:queueleft} = await useLazyAsyncData(\"queueleft\",()=> $fetch(`/api/queue/queueCountleft?queueid=${myqueues.value?.queueid}`));\n\nconsole.log(queueleft.value);\n\n// refresh data every 5 sec\nconst { pause, resume, isActive } = useIntervalFn(async () => {\n  console.log(`refreshing the data again ${new Date().toISOString()}`);\n  // refresh() // will call the 'todos' endpoint, just above\n  console.log(myqueues.value?.status);\n  let status_ = myqueues.value?.status;\n\n  // refresh data\n  await refreshNuxtData(\"queue\");\n  await refreshNuxtData(\"allqueue\");\n  await refreshNuxtData(\"queueleft\");\n\n\n  if (myqueues.value !== undefined && myqueues.value !== null ) {\n  channel = convertChannel(myqueues.value.channel);\n}\n\n\n  console.log(\"allqueue : \" + allQueues.value?.length);\n  if (allQueues.value?.length !== undefined && allQueues.value !== undefined && queueleft.value !== null && queueleft.value !== -1) {\n    leftqueue.value = queueleft.value ;\n    allQueues.value.forEach((value: { channel: string; queueid: any }) => {\n      if (value.channel === \"ONE\") {\n        channel1.value = value.queueid;\n      } else if (value.channel === \"TWO\") {\n        channel2.value = value.queueid;\n      } else if (value.channel === \"THREE\") {\n        channel3.value = value.queueid;\n      }\n    });\n  }\n\n\n  if (status_ === \"FINISH\") {\n    showSuccessalert();\n  } else if (status_ === \"SKIP\") {\n    showAlertpass();\n  } else if (status_ === \"PROCESS\") {\n\n    showYourturn(channel);\n  } \n  else if(status_ === \"STOP\"){\n    showAlertwaiting();\n  }\n  else if (leftqueue.value === 5) {\n    // console.log(\"alert\");\n    showLeftqueuealert();\n  } else {\n    Swal.close();\n  }\n}, 5000);  //Coodown 5 ms\n\nasync function showLeftqueuealert() {\n  const result = await Swal.fire({\n    title: `<h1 class=\"text-xl\">จะถึงคิวของคุณแล้ว</h1>`,\n    html: `\n  <span class=\"i-heroicons-user-solid w-40 h-40 \"></span>\n  <div class=\"flex items-center justify-center\">\n              <span class=\"i-heroicons-clock w-8 h-8 mr-3\"></span>\n              <p class=\"mr-2\">เหลืออีก </p>\n              <p class=\"mr-2 text-red-500 font-bold\"> 5 </p>\n              <p class=\"mr-2\">คิว</p>\n            </div>\n  `,\n    // showCloseButton: true,\n    confirmButtonText: `\n   ยืนยัน\n  `,\n    confirmButtonColor: \"#191771\",\n    color: \"#191771\",\n  });\n}\n\nasync function cancelqueue() {\n  pause();\n  const result = await Swal.fire({\n    title: \"คุณแน่ใจใช่ไหม?\",\n    text: \"คุณกำลังจะยกเลิกคิว!\",\n    icon: \"warning\",\n    showCancelButton: true,\n    confirmButtonColor: \"#191771\",\n    cancelButtonColor: \"#ED1C24\",\n    confirmButtonText: \"ยืนยัน!\",\n    cancelButtonText: \"ยกเลิก\",\n    iconColor: \"#ED1C24\",\n    color: \"#191771\",\n  });\n  if (result.isConfirmed) {\n    const res = await $fetch(\"/api/queue/queueDelete\", {\n      method: \"DELETE\",\n      body: {\n        queueid: myqueues.value?.queueid,\n      },\n    });\n    if (res === \"Delete!\") {\n      is_reserve.value = null;\n      myqueueid.value = null;\n      navigateTo(\"/student/\", { replace: true });\n    }\n  } else {\n    resume();\n  }\n}\n\nasync function showSuccessalert() {\n  pause();\n  await Swal.fire({\n    color: \"#191771\",\n    icon: \"success\",\n    html: `<h1>สิ้นสุดการให้บริการ <br/> กรุณาทำแบบสอบถามในหน้าต่อไป</h1>`,\n    showConfirmButton: false,\n    timer: 3500,\n    timerProgressBar: true,\n  });\n  navigateTo(\"/student/satisfaction\", { replace: true });\n}\n\nasync function showYourturn(channel: string) {\n  await Swal.fire({\n    title: `<h1 class=\"text-xl\">ถึงคิวของคุณแล้ว</h1>`,\n    html: `\n      <span class=\"i-heroicons-bell-alert-solid w-40 h-40 \"></span>\n      <div class=\"flex items-center justify-center\">\n        <p class=\"mr-2\">กรุณาไปที่ช่องบริการ </p>\n        <p class=\"mr-2 text-red-500 font-bold\">${channel}</p>\n      </div>\n    `,\n    color: \"#191771\",\n    allowOutsideClick: false,\n    allowEscapeKey: false,\n    allowEnterKey: false,\n    showConfirmButton: false,\n  });\n}\n\nfunction showAlertwaiting() {\n  Swal.fire({\n    title: `<h1 class=\"text-xl\">กรุณารอสักครู่ <br/> อยู่ในช่วงพักของเจ้าหน้าที่</h1>`,\n    html: `<div class=\"custom-loaders\"></div>\n          <p>จะกลับมาเปิดทำการในไม่ช้า</p>  \n    `,\n    customClass: {\n      htmlContainer: \"custom-swal-container\",\n    },\n    color: \"#191771\",\n    allowOutsideClick: false, // Prevent dismissing by clicking outside the modal\n    allowEscapeKey: false, // Prevent dismissing by pressing the Escape key\n    allowEnterKey: false, // Prevent dismissing by pressing the Enter key\n    showConfirmButton: false,\n  });\n}\n\nasync function showAlertpass() {\n  pause();\n  const confirm = await Swal.fire({\n    title: `<h1 class=\"text-xl\">คิวของคุณผ่านไปแล้ว</h1>`,\n    html: `\n  <span class=\"i-heroicons-exclamation-triangle-solid w-40 h-40 text-red-600 \"></span>\n  <div class=\"flex items-center justify-center\">\n    <p>กดยืนยันเพื่อกลับไปหน้าแรก</p>\n    </div>\n    `,\n    allowOutsideClick: false, // Prevent dismissing by clicking outside the modal\n    allowEscapeKey: false, // Prevent dismissing by pressing the Escape key\n    allowEnterKey: false, // Prevent dismissing by pressing the Enter key\n    // showCloseButton: true,\n    confirmButtonText: `\n    <div class=\"flex items-center\">\n      <span class=\"i-heroicons-arrow-uturn-left mr-1  \"></span>\n      ยืนยัน\n      </div>\n  `,\n    confirmButtonColor: \"#191771\",\n    color: \"#191771\",\n  });\n  // .then((value: { isConfirmed: any }) => {\n  //   if (value.isConfirmed) {\n  //     navigateTo(\"/student/\", { replace: true });\n  //   }\n  // });\n  if (confirm.isConfirmed) {\n    const res = await $fetch(\"/api/queue/queueDelete\", {\n      method: \"DELETE\",\n      body: {\n        queueid: myqueues.value?.queueid,\n      },\n    });\n    if (res === \"Delete!\") {\n      is_reserve.value = null;\n      navigateTo(\"/student/\", { replace: true });\n    }\n  }\n}\n</script> -->\n\n<style lang=\"scss\">\n.screens {\n  background-color: #191770;\n  height: 100vh;\n  width: 100%;\n  overflow: scroll;\n}\n.textHeaders {\n  font-size: 16px;\n  color: #191771;\n}\n.screens .maincontent {\n  display: grid;\n  align-content: start;\n  align-items: center;\n  align-self: center;\n  justify-content: center;\n  /* fullscreens - navbar = maincontent */\n  height: calc(100vh - 98px);\n  .cancelbutton {\n    display: flex;\n    justify-content: center;\n  }\n\n  .text-wrapper-2 {\n    color: red;\n    font-family: \"Inter-Bold\", Helvetica;\n    font-size: 20px;\n    font-weight: 700;\n    letter-spacing: 0;\n    line-height: normal;\n    text-align: center;\n  }\n\n  .channel-wrapper {\n    display: grid;\n    align-items: center;\n    align-self: center;\n    justify-content: center;\n\n    .channel {\n      margin-bottom: 2rem;\n\n      .blockchannel {\n        display: flex;\n        justify-content: space-between;\n        background-color: #ffffff;\n        width: 70vw;\n        height: 5rem;\n        border-radius: 2rem;\n        padding-left: 1.5rem;\n        padding-right: 2rem;\n      }\n\n      .textchannel {\n        margin-left: 0.7rem;\n        margin-bottom: 0.5rem;\n        font-family: \"Inter-Bold\", Helvetica;\n        color: #ffffff;\n        font-weight: 700;\n      }\n    }\n  }\n}\n\n.swal2-container .swal2-html-container {\n  margin-left: auto;\n  margin-right: auto;\n  overflow: visible;\n}\n\n.custom-loaders {\n  margin-left: auto;\n  margin-right: auto;\n  overflow: visible;\n  border: 15px solid #f3f3f3;\n  /* Light grey */\n  border-top: 15px solid red;\n  /* Blue */\n  border-radius: 50%;\n  margin-bottom: 1rem;\n  width: 100px;\n  height: 100px;\n  animation: spin 1s linear infinite;\n}\n\n@keyframes spin {\n  0% {\n    transform: rotate(0deg);\n  }\n\n  100% {\n    transform: rotate(360deg);\n  }\n}\n</style>\n"],"mappings":"AAmDA,eAAe,CAEf","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}